#define BLYNK_TEMPLATE_ID "TMPL3a0bundUs"
#define BLYNK_TEMPLATE_NAME "motion sensor light"
#include <dummy.h>
#include <Blynk.h>
#define BLYNK_AUTH_TOKEN "klPoUbtRBsVgQWrfIOxBVzr17e9GheeY"
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#define CAMERA_MODEL_AI_THINKER // Has PSRAM
#include "camera_pins.h"
#define PIR 13
#define PHOTO 14
#define LED 4
const char* ssid = "vivi";
const char* password = "12389000";
char auth[] = "klPoUbtRBsVgQWrfIOxBVzr17e9GheeY"; //sent by Blynk
String local_IP;
void startCameraServer();
void takePhoto()
{
 digitalWrite(LED, HIGH);
 delay(200);
 uint32_t randomNum = random(50000);
 Serial.println("http://"+local_IP+"/capture?_cb="+ (String)randomNum);
 Blynk.setProperty(V1, "urls", "http://"+local_IP+"/capture?_cb="+(String)randomNum);
 digitalWrite(LED, LOW);
 delay(1000);
}
void setup() {
 Serial.begin(115200);
 pinMode(LED,OUTPUT);
 Serial.setDebugOutput(true);
 Serial.println();

 camera_config_t config;
 config.ledc_channel = LEDC_CHANNEL_0;
 config.ledc_timer = LEDC_TIMER_0;
 config.pin_d0 = Y2_GPIO_NUM;
 config.pin_d1 = Y3_GPIO_NUM;
 config.pin_d2 = Y4_GPIO_NUM;
 config.pin_d3 = Y5_GPIO_NUM;
 config.pin_d4 = Y6_GPIO_NUM;
 config.pin_d5 = Y7_GPIO_NUM;
 config.pin_d6 = Y8_GPIO_NUM;
 config.pin_d7 = Y9_GPIO_NUM;
 config.pin_xclk = XCLK_GPIO_NUM;
 config.pin_pclk = PCLK_GPIO_NUM;
 config.pin_vsync = VSYNC_GPIO_NUM;
 config.pin_href = HREF_GPIO_NUM;
 config.pin_sscb_sda = SIOD_GPIO_NUM;
 config.pin_sscb_scl = SIOC_GPIO_NUM;
 config.pin_pwdn = PWDN_GPIO_NUM;
 config.pin_reset = RESET_GPIO_NUM;
 config.xclk_freq_hz = 20000000;
 config.pixel_format = PIXFORMAT_JPEG;

 if(psramFound()){
 config.frame_size = FRAMESIZE_UXGA;
 config.jpeg_quality = 10;
 config.fb_count = 2;
 } else {
 config.frame_size = FRAMESIZE_SVGA;
 config.jpeg_quality = 12;
 config.fb_count = 1;
 }
 esp_err_t err = esp_camera_init(&config);
 if (err != ESP_OK) {
 Serial.printf("Camera init failed with error 0x%x", err);
 return;
 }
 sensor_t * s = esp_camera_sensor_get();
 if (s->id.PID == OV3660_PID) {
 s->set_vflip(s, 1); // flip it back
 s->set_brightness(s, 1);
 s->set_saturation(s, -2);
 }
 // drop down frame size for higher initial frame rate
 s->set_framesize(s, FRAMESIZE_QVGA);
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
 delay(500);
 Serial.print(".");
 }
 Serial.println("");
 Serial.println("WiFi connected");
 startCameraServer();
 Serial.print("Camera Ready! Use 'http://");
 Serial.print(WiFi.localIP());
 local_IP = WiFi.localIP().toString();
 Serial.println("' to connect");
 Blynk.begin(auth, ssid, password);
}
void loop() {
 Blynk.run();
 if(digitalRead(PIR) == LOW){
 Serial.println("Send Notification");
 Blynk.notify("Intruder Detected...");
 Serial.println("Capture Photo");
 takePhoto();
 delay(3000);
 }
 if(digitalRead(PHOTO) == HIGH){
 Serial.println("Capture Photo");
 takePhoto();
 }
}
String getValue(String data, char separator, int index) {
 int found = 0;
 int strIndex[] = { 0, -1 };
 int maxIndex = data.length() - 1;

 for (int i = 0; i <= maxIndex && found <= index; i++) {
 if (data.charAt(i) == separator || i == maxIndex) {
 found++;
 strIndex[0] = strIndex[1] + 1;
 strIndex[1] = (i == maxIndex) ? i+1 : i;
 }
 }
 return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
void FB_MSG_is_photo_send_successfully (bool state) {
 String send_feedback_message = "";
 if(state == false) {
 send_feedback_message += "From the ESP32-CAM :\n\n";
 send_feedback_message += "ESP32-CAM failed to send photo.\n";
 send_feedback_message += "Suggestion :\n";
 send_feedback_message += "- Reset ESP32-CAM\n";
 send_feedback_message += "- Change FRAMESIZE (see Drop down frame size in void
configInitCamera)\n";
 Serial.print(send_feedback_message);
 send_feedback_message += "\n\n";
 send_feedback_message += "/start : to see all commands.";
 bot.sendMessage(ID, send_feedback_message, "");
 } else {
 Serial.println("Successfully sent photo.");
 send_feedback_message += "From the ESP32-CAM :\n\n";
 send_feedback_message += "Photo sent successfully.\n\n";
 send_feedback_message += "/start : to see all commands.";
 bot.sendMessage(ID, send_feedback_message, "");
 }
}
void LEDFlash_State (bool ledState) {
 digitalWrite(FLASH_LED_PIN, ledState);
}
void configInitCamera(){
 camera_config_t config;
 config.ledc_channel = LEDC_CHANNEL_0;
 config.ledc_timer = LEDC_TIMER_0;
 config.pin_d0 = Y2_GPIO_NUM;
 config.pin_d1 = Y3_GPIO_NUM;
 config.pin_d2 = Y4_GPIO_NUM;
 config.pin_d3 = Y5_GPIO_NUM;
 config.pin_d4 = Y6_GPIO_NUM;
 config.pin_d5 = Y7_GPIO_NUM;
 config.pin_d6 = Y8_GPIO_NUM;
 config.pin_d7 = Y9_GPIO_NUM;
 config.pin_xclk = XCLK_GPIO_NUM;
 config.pin_pclk = PCLK_GPIO_NUM;
 config.pin_vsync = VSYNC_GPIO_NUM;
 config.pin_href = HREF_GPIO_NUM;
 config.pin_sscb_sda = SIOD_GPIO_NUM;
 config.pin_sscb_scl = SIOC_GPIO_NUM;
 config.pin_pwdn = PWDN_GPIO_NUM;
 config.pin_reset = RESET_GPIO_NUM;
 config.xclk_freq_hz = 20000000;
 config.pixel_format = PIXFORMAT_JPEG;
 if(psramFound()){
 config.frame_size = FRAMESIZE_UXGA; //--> FRAMESIZE_ +
UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA
 config.jpeg_quality = 10;
 config.fb_count = 2;
 } else {
 config.frame_size = FRAMESIZE_SVGA;
 config.jpeg_quality = 12;
 config.fb_count = 1;
 }
 esp_err_t err = esp_camera_init(&config);
 if (err != ESP_OK) {
 Serial.printf("Camera init failed with error 0x%x", err);
 Serial.println();
 Serial.println("Restart ESP32 Cam");
 delay(1000);
 ESP.restart();
 }

 sensor_t * s = esp_camera_sensor_get();
 s->set_framesize(s, FRAMESIZE_SXGA); //--> FRAMESIZE_ +
UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA
void handleNewMessages(int numNewMessages) {
 Serial.print("Handle New Messages: ");
 Serial.println(numNewMessages);
 String chat_id = String(bot.messages[i].chat_id);
 if (chat_id != CHAT_ID){
 bot.sendMessage(chat_id, "Unauthorized user", "");
 Serial.println("Unauthorized user");
 Serial.println("------------");
 continue;
 }

 String text = t.messages[i].text;
 Serial.println(text);
 String send_feedback_message = "";
 String from_name = bot.messages[i].from_name;
 if (text == "/start") {
 send_feedback_message += "From the ESP32-CAM :\n\n";
 send_feedback_message += "Welcome , " + from_name + "\n";
 send_feedback_message += "Use the following commands to interact with the ESP32-
 send_feedback_message += "/capture_photo : takes a new photo\n";
 send_feedback_message += "/capture_photo_with_LEDFlash : takes a new photo with
LED FLash\n";
 send_feedback_message += "/flash_on : Turn on the LED Flash \n";
 send_feedback_message += "/flash_off : Turn off LED Flash \n";
 bot.sendMessage(CHAT_ID, send_feedback_message, "");
 Serial.println("------------");
 }

 if (text == "/flash_on") {
 LEDFlash_State(ON);
 Serial.println("LED Flash On");
 Serial.println("------------");
 send_feedback_message += "From the ESP32-CAM :\n\n";
 send_feedback_message += "LED Flash On\n\n";
 send_feedback_message += "/start : to see all commands.";
 bot.sendMessage(CHAT_ID, send_feedback_message, "");
 }
 if (text == "/flash_off") {
 LEDFlash_State(OFF);
 Serial.println("LED Flash Off");
 Serial.println("------------");
 send_feedback_message += "From the ESP32-CAM :\n\n";
 send_feedback_message += "LED Flash Off\n\n";
 send_feedback_message += "/start : to see all commands.";
 bot.sendMessage(CHAT_ID, send_feedback_message, "");
 }

 // The condition if the command received is "/capture_photo".
 if (text == "/capture_photo") {
 sendPhoto = true;
 Serial.println("New photo request");
 }

 if (text == "/capture_photo_with_LEDFlash") {
 capturePhotoWithFlash = true;
 sendPhoto = true;
 Serial.println("New photo request");
 }
String sendPhoto() {
 const char* myDomain = "api.telegram.org";
 String getAll = "";
 String getBody = "";
 Serial.println("Taking a photo...");
 if(capturePhotoWithFlash == true) {
 LEDFlash_State(ON);
 }
 delay(1000);
 camera_fb_t * fb = NULL;
 fb = esp_camera_fb_get();
 if(!fb) {
 Serial.println("Camera capture failed");
 Serial.println("Restart ESP32 Cam");
 delay(1000);
 ESP.restart();
 return "Camera capture failed";
 }
 if(capturePhotoWithFlash == true) {
 LEDFlash_State(OFF);
 capturePhotoWithFlash = false;
 }
 Serial.println("Successful photo taking.");
 Serial.println("Connect to " + String(myDomain));
 if (clientTCP.connect(myDomain, 443)) {
 Serial.println("Connection successful");
 Serial.print("Send photos");

 String head = "--Esp32Cam\r\nContent-Disposition: form-data; name=\"chat_id\"; \r\n\r\n";
 head += CHAT_ID;
 if(PIR_Sensor_is_stable == false) {
 if(millis() > lastTime_countdown_Ran + countdown_interval_to_stabilize_PIR_Sensor) {
 if(countdown_to_stabilize_PIR_Sensor > 0) countdown_to_stabilize_PIR_Sensor--;
 if(countdown_to_stabilize_PIR_Sensor == 0) {
 PIR_Sensor_is_stable = true;
 Serial.println();
 Serial.println("------------");
 Serial.println("The PIR Sensor stabilization time is complete.");
 Serial.println("The PIR sensor can already work.");
 Serial.println("------------");
 String send_Status_PIR_Sensor = "";
 send_Status_PIR_Sensor += "From the ESP32-CAM :\n\n";
 send_Status_PIR_Sensor += "The PIR Sensor stabilization time is complete.\n";
 send_Status_PIR_Sensor += "The PIR sensor can already work.";
 bot.sendMessage(CHAT_ID, send_Status_PIR_Sensor, "");
 }
 lastTime_countdown_Ran = millis();
 }
 }
 if(capture_Photo_with_PIR_state() == ON) {
 if(PIR_State() == true && PIR_Sensor_is_stable == true) {
 Serial.println("------------");
 Serial.println("The PIR sensor detects objects and movements.");
 boolPIRState = true;
 boolPIRState = false;
 }
 }
}